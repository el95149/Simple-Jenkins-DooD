pipeline {
    agent any
    environment {
        workDir = 'example/maven'
    }

    stages {
        stage('checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            agent {
                docker {
                    image 'maven:3-alpine'
                    args '-v $HOME/.m2:/root/.m2'
                }
            }
            steps {
                sh 'mvn -f ${workDir}/pom.xml clean package'
            }
        }

        stage('静的コード解析') {
            steps {
                parallel(
                    '静的コード解析' : {
                        step([
                            $class: 'CheckStylePublisher',
                            pattern: "checkstyle/*.xml"
                        ])
                        step([
                            $class: 'FindBugsPublisher',
                            pattern: "findbugs/*.xml"
                        ])
                        step([
                            $class: 'PmdPublisher',
                            pattern: "pmd/*.xml"
                        ])
                        step([
                            $class: 'DryPublisher',
                            pattern: "cpd/*.xml"
                        ])
                        step([
                            $class: 'WarningsPublisher',
                            consoleParsers: [
                                [parserName: 'Java Compiler (javac)'],
                                [parserName: 'Maven'],
                            ]
                        ])
                    },
                    'ステップカウント': {
                        stepcounter settings: [
                            [key:'Java', filePattern: "${workDir}/src/main/java/**/*.java"]
                        ]
                    },
                    'タスクスキャン': {
                        step([
                            $class: 'TasksPublisher',
                            pattern: '${workDir}/**',
                            ignoreCase: true,
                            high: 'System.out.System.err',
                            normal: 'TODO,FIXME,XXX',
                        ])
                    }
                )
            }
        }

        stage('テスト') {
            steps {
                junit '**/target/surefire-reports/TEST-*.xml'
                archive 'target/*.jar'
                step([
                    $class: 'JacocoPublisher',
                    execPattern: "*.exec",
                    exclusionPattern: '**/*Test.class'
                ])
            }
        }
    }
}